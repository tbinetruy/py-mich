* Goal of the project

We'd like to compile Python code to Tezos' Micelson bytecode using Python's  ~ast~ module. So fare, what has been implemented is:

- a virtual machine with a Michelson-like bytecode. Ideally it would need to be identical rather than inspired, I will be working on this in the following weeks [1]. The VM is in `vm.py`.
- a compiler backend from a Python ast to the Michelson implemented in the VM to speed up development and allow easy testing. The compiler is in `compiler.py`.

[1] https://tezos.gitlab.io/whitedoc/michelson.html#variable-annotations

* Usage

So far, only number variables and addition has been implemented in the compiler :D I'll update the readme as things evolve.

Here is an example of how to declare and call variables:

#+begin_src python :exports both :session readme
from vm import VM
from compiler import Compiler

vm = VM()
source = "a = 1 \nb = 2 \nc = a + b \na + b + c"
c = Compiler(source)
instructions = c.compile(c.ast)
vm._run_instructions(instructions)
vm._debug()

vm.stack, vm.sp
#+end_src

#+RESULTS:
| (1 2 3 6) | 3 |

As we can see, all three declared variables have been added to the stack along with the value for `a + b + c`.

We can see what the python code compiled to as follows:

#+begin_src python :exports both :session readme
[(i.name, i.args) for i in instructions]
#+end_src

#+RESULTS:
| PUSH | (1) |
| PUSH | (2) |
| DIP  | (1) |
| DUP  | nil |
| DIG  | nil |
| DIP  | (1) |
| DUP  | nil |
| DIG  | nil |
| ADD  | nil |
| DIP  | (2) |
| DUP  | nil |
| DIG  | nil |
| DIP  | (2) |
| DUP  | nil |
| DIG  | nil |
| ADD  | nil |
| DIP  | (1) |
| DUP  | nil |
| DIG  | nil |
| ADD  | nil |
